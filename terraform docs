Download terraform: 
https://developer.hashicorp.com/terraform/install

create a terraform folder in the C drive then download the terraform tool and extract it here: C:\terraform


set the env variable: start button -> edit the system env variable -> environment variable -> click on path under system env variable -> New
and type C:\terraform


open powershell/cmd/gitbash and type terraform

Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive command prompt
  fmt           Reformat your configuration in the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps in an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials for a remote host
  logout        Remove locally-stored credentials for a remote host
  metadata      Metadata related commands
  output        Show output values from your root module
  providers     Show the providers required for this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  test          Execute integration tests for Terraform modules
  untaint       Remove the 'tainted' state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management



create access key & secret key in aws (iam-user-terraform)

configure access key & secret key locally, open gitbash/powershell/cmd and type "aws configure" and provide "acess key" "secret key" and "region id"


-----------How to create(provision) resources in aws
google "terraform proider" -> https://registry.terraform.io/browse/providers --> select AWS -> copy Use provider content

C:/terraform

vi provider.tf

terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.75.0"
    }
  }
}

provider "aws" {
  # Configuration options
}



google -> terraform aws <resource name> resource  -> ex: terraform aws ecr resource
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository


vi main.tf            (extension should be .tf only)

resource "aws_ecr_repository" "ecr-resource" {
  name                 = "devops-ecr"
  image_tag_mutability = "MUTABLE"

}


where:  
aws_ecr_repository    --> preconfigured resource 
ecr-resource          --> resource type
name:                 --> name of the ECR (required category)
image_tag_mutability  --> optional


terraform validate         ---> just validate the file


Q. why terraform is famous?
Q. Diff between terraform and other provisioning tool(cloudformation/ansible/azure arm template/chef/puppet etc)??
Q. How can we check the output before creation the resources?

ans:  
terraform plan:   Show changes required by the current configuration

***we can generate the output of plan command & send it for approval
terraform plan -out abc.json


terraform apply      ------> create/modify resources from tf code


Assignment: change ecr repo name from "devops-ecr" to "my-ecr"



Q. What do you understand by tfstate file?
ans:  where you execute apply command, terraform creates tftate in the background. 
A Terraform state file, or terraform.tfstate, is a JSON file that stores current information about the resource created


Q. What do you understand by tfstate.backup file?
The tfstate.backup file is a backup of the Terraform state file that's created when you modify the code and apply it. 
The tfstate file is a JSON file that tracks the state of resources managed by Terraform,
including their dependencies, configuration, and metadata. 
The tfstate.backup file is a temporary solution that helps ensure the reliability of the infrastructure management process. 
It's created to help users recover a previous state if they accidentally make an undesirable change, such as losing the record of a resource


Q. Where do you store tfstate file and tfstate.backup?
ans:  s3 bucket ( you can enable versioning) or github 


Q. why we need to store tfstate.backup?
or
Q. Can we rollback the changes in terraform?
ans: yes, we can refer tfstate.backup for rollback activity



terraform destroy    --> use wisely, it deletes the created resources.


===========Create s3 bucket (aws_s3_bucket)
vi s3.tf

resource "aws_s3_bucket" "s3name" {
  bucket = "devops-pune-kumar"

  tags = {
    Name        = "devops-pune-kumar"
    Environment = "Dev"
  }
}



terraform validate
how to create specific resources (if there is more than one tf file in the current directory)

syntx:  terraform plan --target=<resource>.<resourceID>
ex:     terraform plan --target=aws_s3_bucket.s3name

terraform apply --target=aws_s3_bucket.s3name





Assignment: 
1. create Ec2, EKS resource, Create RDS resource, Create Security group (inbound and outbound), Create ELB
2. Create S3 Module in terraform


Module: so that we can re-use the function or terraform code.

====Have you ever created any module in terraform
module sample ref: 
https://github.com/iam-veeramalla/terraform-zero-to-hero
https://github.com/DontShaveTheYak/terraform-module-template
https://github.com/futurice/terraform-examples





